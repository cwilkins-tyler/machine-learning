import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the environment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.trial_number = 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0

        if testing:
            self.epsilon = 0
            self.alpha = 0
        else:

            # ep = a ^ t
            #a = 1 - self.alpha
            #self.epsilon = math.pow(self.alpha, self.trial_number)

            # ep = cos(at)
            #self.epsilon = math.cos(self.alpha * self.trial_number)

            # ep = 1 / t ^ 2
            #self.epsilon = 1 / float(math.pow(self.trial_number, 2))

            # ep = e ^ -at
            #a = 1 - self.alpha
            #self.epsilon = math.exp((self.alpha * self.trial_number * -1))

            # q-table based
            self.epsilon = self.percentage_blankQ()

            # linear
            #self.epsilon -= 0.01

            self.trial_number += 1

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        # Set 'state' as a tuple of relevant data for the agent
        state = (waypoint, inputs['light'], ('oncoming', inputs['oncoming']), ('left', inputs['left']))

        return state

    def any_blankQ(self):
        for state in self.Q:
            for action in self.valid_actions:
                if self.Q[state][action] == 0:
                    return True

        return False

    def percentage_blankQ(self):
        blank_actions = 0
        total_actions = 0
        for state in self.Q:
            for action in self.valid_actions:
                if self.Q[state][action] == 0:
                    blank_actions += 1
                total_actions += 1

        if total_actions == 0:
            return 1
        else:
            return float(blank_actions) / float(total_actions)

    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        # Calculate the maximum Q-value of all actions for a given state
        current_state_table = self.Q[state]
        highest_q = -9999
        best_action = ''
        best_actions = []
        for action in current_state_table:
            if current_state_table[action] > highest_q:
                highest_q = current_state_table[action]
                best_action = action
                best_actions = []
            elif current_state_table[action] == highest_q:
                best_actions.append(action)

        if len(best_actions) > 0:
            print('Randomly choosing one of the best actions')
            maxQ = random.choice(best_actions)
            print('Choosing {}'.format(maxQ))
        else:
            print('Choosing action {} with q-value {}'.format(best_action, highest_q))
            maxQ = best_action

        return maxQ 

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        # When learning, check if the 'state' is not in the Q-table
        #   If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if self.learning:
            if state not in self.Q:
                self.Q[state] = dict()
                for action in self.valid_actions:
                    self.Q[state][action] = 0

        return

    def get_empty_actions(self, state):
        empty_actions = []
        for possible_action in self.valid_actions:
            action_value = self.Q[state][possible_action]
            if action_value == 0:
                empty_actions.append(possible_action)
        return empty_actions

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        if self.learning:
            empty_actions = self.get_empty_actions(state)
            random_number = random.random()
            if self.epsilon >= random_number:
                # explore
                print('Choosing random action ({}, {})'.format(self.epsilon, random_number))
                if len(empty_actions) > 0:
                    action = random.choice(empty_actions)
                else:
                    action = random.choice(self.valid_actions)
                print('Choosing {}'.format(action))
            else:
                # exploit
                action = self.get_maxQ(state)
        else:
            action = random.choice(self.valid_actions)
 
        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            current_state = self.Q.get(state, None)
            print(state, current_state)
            if current_state:
                current_action = self.Q[state].get(action, None)
                if not current_action:
                    self.Q[state][action] = reward
                else:
                    self.Q[state][action] = (reward * self.alpha) + (self.Q[state][action] * (1 - self.alpha))
            print(state, current_state)

        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose=True)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.01, log_metrics=True, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10, tolerance=0.07)


if __name__ == '__main__':
    run()
